// Generated by CoffeeScript 1.6.1
(function() {
  var CoffeeScript, Diagram, JavaScript, Language, ObjectBuilderController, ObjectDescriptor, XML, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  this.app = (_ref = window.app) != null ? _ref : {};

  this.app.Languages = {};

  Language = (function() {

    function Language(name, options) {
      var _ref1, _ref2;
      this.name = name;
      if (options == null) {
        options = {};
      }
      this.template = (_ref1 = options.template) != null ? _ref1 : this.name.toLowerCase();
      this.prism = (_ref2 = options.prism) != null ? _ref2 : this.name.toLowerCase();
      app.Languages[this.name] = this;
    }

    Language.prototype.renderInterface = function(object) {
      return ecoTemplates[this.template](object);
    };

    return Language;

  })();

  /* --------------------------------------------
       Begin ObjectDescriptor.coffee
  --------------------------------------------
  */


  ObjectDescriptor = (function() {
    var memberList;

    memberList = {};

    function ObjectDescriptor(name) {
      this.name = name;
      this.methods = [];
      this.properties = [];
    }

    ObjectDescriptor.prototype.addMethod = function(name) {
      if (!memberList["m$" + name]) {
        this.methods.push({
          name: name
        });
        return memberList["m$" + name] = true;
      }
    };

    ObjectDescriptor.prototype.addProperty = function(name) {
      if (!memberList["p$" + name]) {
        this.properties.push({
          name: name
        });
        return memberList["p$" + name] = true;
      }
    };

    return ObjectDescriptor;

  })();

  /* --------------------------------------------
       Begin CoffeeScript.coffee
  --------------------------------------------
  */


  CoffeeScript = (function(_super) {

    __extends(CoffeeScript, _super);

    function CoffeeScript() {
      CoffeeScript.__super__.constructor.call(this, "CoffeeScript", {
        template: "coffee"
      });
    }

    return CoffeeScript;

  })(Language);

  new CoffeeScript;

  /* --------------------------------------------
       Begin XML.coffee
  --------------------------------------------
  */


  XML = (function(_super) {

    __extends(XML, _super);

    function XML() {
      XML.__super__.constructor.call(this, "XML", {
        prism: "markup"
      });
    }

    return XML;

  })(Language);

  new XML;

  /* --------------------------------------------
       Begin JavaScript.coffee
  --------------------------------------------
  */


  JavaScript = (function(_super) {

    __extends(JavaScript, _super);

    function JavaScript() {
      JavaScript.__super__.constructor.call(this, "JavaScript");
    }

    return JavaScript;

  })(Language);

  new JavaScript;

  /* --------------------------------------------
       Begin Diagram.coffee
  --------------------------------------------
  */


  Diagram = (function(_super) {

    __extends(Diagram, _super);

    function Diagram() {
      Diagram.__super__.constructor.call(this, "Diagram");
    }

    return Diagram;

  })(Language);

  new Diagram;

  /* --------------------------------------------
       Begin app.coffee
  --------------------------------------------
  */


  window.$ = function(selector) {
    var elements;
    elements = document.querySelectorAll(selector);
    if (elements.length === 1) {
      return elements[0];
    } else {
      return elements;
    }
  };

  window.$val = function(fieldname) {
    var elements, radio, _i, _len;
    elements = $("[name='" + fieldname + "']");
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      radio = elements[_i];
      if (radio.checked) {
        return radio.value;
      }
    }
  };

  this.app = (_ref1 = window.app) != null ? _ref1 : {};

  ObjectBuilderController = (function() {
    var RETURN_KEY;

    RETURN_KEY = 13;

    function ObjectBuilderController() {
      var _this = this;
      this.handleKeypress = function(e) {
        return ObjectBuilderController.prototype.handleKeypress.apply(_this, arguments);
      };
      this.addMethod = function(e) {
        return ObjectBuilderController.prototype.addMethod.apply(_this, arguments);
      };
      this.addProperty = function(e) {
        return ObjectBuilderController.prototype.addProperty.apply(_this, arguments);
      };
      this.setObjectName = function(e) {
        return ObjectBuilderController.prototype.setObjectName.apply(_this, arguments);
      };
      this.currentObject = new ObjectDescriptor;
      this.addLanguagesToForm();
      this.assignHandlers();
      this.setFocusAndPickDefaultLanguage();
    }

    ObjectBuilderController.prototype.assignHandlers = function() {
      var radio, _i, _len, _ref2,
        _this = this;
      ($('#name')).addEventListener("change", this.setObjectName, false);
      ($('#property')).addEventListener("change", this.addProperty, false);
      ($('#method')).addEventListener("change", this.addMethod, false);
      _ref2 = $("[name='codelang']");
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        radio = _ref2[_i];
        radio.addEventListener("change", (function() {
          return _this.changed();
        }), false);
      }
      ($('#property')).addEventListener("keypress", this.handleKeypress, false);
      return ($('#method')).addEventListener("keypress", this.handleKeypress, false);
    };

    ObjectBuilderController.prototype.setObjectName = function(e) {
      var val;
      val = e.target.value;
      if (val === "tester") {
        return this.testObject();
      }
      this.currentObject.name = val;
      return this.changed();
    };

    ObjectBuilderController.prototype.addProperty = function(e) {
      var val;
      val = e.target.value;
      this.currentObject.addProperty(val);
      return this.changed();
    };

    ObjectBuilderController.prototype.addMethod = function(e) {
      var val;
      val = e.target.value;
      this.currentObject.addMethod(val);
      return this.changed();
    };

    ObjectBuilderController.prototype.addLanguagesToForm = function() {
      var index, language, name, radios;
      index = 0;
      radios = (function() {
        var _ref2, _results;
        _ref2 = app.Languages;
        _results = [];
        for (name in _ref2) {
          language = _ref2[name];
          if (name !== "Diagram") {
            _results.push("<p class=\"radiofield\"><input type=\"radio\" value=\"" + name + "\" name=\"codelang\" id=\"codelang-" + (++index) + "\"><label for=\"codelang-" + index + "\">" + name + "</label></p>");
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      })();
      return ($(".language")).innerHTML += radios.join("\n");
    };

    ObjectBuilderController.prototype.testObject = function() {
      this.currentObject = new ObjectDescriptor("Language");
      this.currentObject.addMethod("renderInterface");
      this.currentObject.addMethod("renderHTML");
      this.currentObject.addProperty("name");
      this.currentObject.addProperty("title");
      return this.changed();
    };

    ObjectBuilderController.prototype.renderCode = function(object, language) {
      var codeWindow, pre, presenter;
      presenter = app.Languages[language];
      pre = presenter.renderInterface(object);
      codeWindow = $('.output code');
      codeWindow.innerText = pre;
      return codeWindow.className = "language-" + presenter.prism;
    };

    ObjectBuilderController.prototype.renderObject = function(object) {
      var code, diagramWindow, presenter;
      presenter = app.Languages.Diagram;
      code = presenter.renderInterface(object);
      diagramWindow = $('.diagram');
      return diagramWindow.innerHTML = code;
    };

    ObjectBuilderController.prototype.changed = function() {
      var lang;
      lang = $val('codelang');
      this.renderObject(this.currentObject);
      this.renderCode(this.currentObject, lang);
      return Prism.highlightAll();
    };

    ObjectBuilderController.prototype.handleKeypress = function(e) {
      var code, input;
      input = e.target;
      code = e.keyCode;
      if (code === RETURN_KEY) {
        return input.select();
      }
    };

    ObjectBuilderController.prototype.setFocusAndPickDefaultLanguage = function() {
      ($('#codelang-1')).checked = true;
      ($('#name')).focus();
      ($('#name')).select();
      return this.changed();
    };

    return ObjectBuilderController;

  })();

  app.controller = new ObjectBuilderController;

}).call(this);
